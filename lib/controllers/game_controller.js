// Generated by CoffeeScript 1.4.0
(function() {
  var GameController,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  chrome.app.Controllers.Game = GameController = (function() {

    function GameController(player) {
      var $container, packet, renderer;
      this.player = player;
      this.render = __bind(this.render, this);

      packet = new chrome.app.Packets.SelectCharacter(this.player);
      packet.onReady(Lineage.socket.send);
      this.stage = new PIXI.Stage(0xFFFFFF, true);
      renderer = PIXI.autoDetectRenderer(1024, 768);
      this.components({
        chat: new chrome.app.Components.Chat,
        tiles: new chrome.app.Components.Tiles(this.stage, {
          width: renderer.width,
          height: renderer.height,
          tileSize: 32
        }),
        characters: new chrome.app.Components.Characters(this.stage, this.player),
        camera: new chrome.app.Components.Camera(renderer)
      });
      $container = $("<div id='game'>").appendTo($(document.body).empty());
      $container.append(renderer.view);
      this.eventify($(document.body));
      renderer.render(this.stage);
      requestAnimationFrame(this.render);
    }

    GameController.prototype.character = function(packet, initializeIfNotCached) {
      this.character = function(packet, initializeIfNotCached) {
        var character;
        if (initializeIfNotCached == null) {
          initializeIfNotCached = false;
        }
        character = this.character.cache[packet.characterId()];
        if (character != null) {
          character.update(packet);
        } else if (initializeIfNotCached) {
          character = new chrome.app.Models.Character(packet);
          this.character.cache[character.id] = character;
        }
        return character;
      };
      this.character.cache = {};
      this.player.update(packet);
      this.character.cache[this.player.id] = this.player;
      return this.player;
    };

    GameController.prototype.components = function() {
      var component, name, _ref;
      if (this.components.value != null) {
        if (arguments.length === 0) {
          return this.components.value;
        }
        return this.components.value[arguments[0]];
      }
      this.components.value = {};
      _ref = arguments[0];
      for (name in _ref) {
        component = _ref[name];
        this.components.value[name] = component;
      }
      return this.components.value;
    };

    GameController.prototype.render = function() {
      this.components("camera").update(this.stage);
      return requestAnimationFrame(this.render);
    };

    GameController.prototype.eventify = function($html) {
      var _this = this;
      $html.on("submit", "form", function(e) {
        var $input, message, type;
        $input = $(e.target).children("input").first();
        message = $input.val();
        $input.val("");
        type = $("#chat ul.types li.active").attr("type");
        _this.components("chat").send(type, {
          body: message
        });
        return false;
      });
      return $html.on("click", "#chat ul.types li", function(e) {
        return _this.components("chat").toggle($(e.target));
      });
    };

    GameController.prototype.received = function(packet) {
      var character, characters;
      switch (packet.id) {
        case PacketId.Chat:
        case PacketId.GlobalChat:
        case PacketId.WhisperChat:
          return this.components("chat").received(packet);
        case PacketId.CharInfo:
          return this.update(this.player.find(packet));
        case PacketId.Player:
          characters = this.components("characters");
          if (packet.name()[0] !== "$") {
            character = this.character(packet, true);
            if (!characters.isOnScreen(character)) {
              characters.add(character);
            }
            return this.components("camera").position(character, characters.delta(character));
          }
          break;
        case PacketId.Move:
          character = this.character(packet);
          if (character != null) {
            characters = this.components("characters");
            return this.components("camera").position(character, characters.delta(character));
          }
          break;
        case PacketId.Remove:
          character = this.character(packet);
          if (character != null) {
            characters = this.components("characters");
            if (characters.isOnScreen(character)) {
              return characters.remove(character);
            }
          }
      }
    };

    return GameController;

  })();

}).call(this);
