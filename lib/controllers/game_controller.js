// Generated by CoffeeScript 1.4.0
(function() {
  var GameController,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  chrome.app.Controllers.Game = GameController = (function() {

    function GameController(player) {
      var $container, packet, sprite;
      this.player = player;
      this.render = __bind(this.render, this);

      packet = new chrome.app.Packets.SelectCharacter(this.player);
      packet.bufferize(Lineage.socket.send);
      this.stage = new PIXI.Stage(0xFFFFFF);
      this.renderer = PIXI.autoDetectRenderer(1024, 768);
      this.components({
        chat: new chrome.app.Components.Chat
      });
      this.characters = {};
      $container = $("<div id='game'>").appendTo($(document.body).empty());
      $container.append(this.renderer.view);
      sprite = this.player.sprite;
      sprite.position.x = this.renderer.width / 2;
      sprite.position.y = this.renderer.height / 2;
      this.stage.addChild(sprite);
      this.eventify($(document.body));
      this.renderer.render(this.stage);
      requestAnimationFrame(this.render);
    }

    GameController.prototype.components = function() {
      var component, name, _ref;
      if (this.components.value != null) {
        if (arguments.length === 0) {
          return this.components.value;
        }
        return this.components.value[arguments[0]];
      }
      this.components.value = {};
      _ref = arguments[0];
      for (name in _ref) {
        component = _ref[name];
        this.components.value[name] = component;
      }
      return this.components.value;
    };

    GameController.prototype.render = function() {
      this.renderer.render(this.stage);
      return requestAnimationFrame(this.render);
    };

    GameController.prototype.move = function(packet) {
      var character, delta, sprite;
      character = this.characters[packet.characterId()];
      sprite = character.sprite;
      delta = {};
      delta.x = packet.x() - this.player.x;
      delta.y = packet.y() - this.player.y;
      sprite.position.x = this.renderer.width / 2 + delta.x * 32;
      return sprite.position.y = this.renderer.height / 2 + delta.y * 32 * -1;
    };

    GameController.prototype.position = function(packet) {
      var character, delta, sprite;
      if (this.characters[packet.characterId()] == null) {
        character = new chrome.app.Models.Character(packet);
        console.log(packet.name());
        delta = {};
        delta.x = character.x - this.player.x;
        delta.y = character.y - this.player.y;
        sprite = character.sprite;
        sprite.position.x = this.renderer.width / 2 + delta.x * 32;
        sprite.position.y = this.renderer.height / 2 + delta.y * 32 * -1;
        this.stage.addChild(sprite);
        return this.characters[packet.characterId()] = character;
      }
    };

    GameController.prototype.eventify = function($html) {
      var _this = this;
      $html.on("submit", "form", function(e) {
        var $input, global, message, packet;
        $input = $(this).children("input").first();
        message = $input.val();
        $input.val("");
        global = $("#chat ul.types li.active").hasClass("global");
        packet = new chrome.app.Packets.Chat(message, global);
        packet.bufferize(Lineage.socket.send);
        return false;
      });
      return $html.on("click", "#chat ul.types li", function(e) {
        return _this.components("chat").toggle($(e.target));
      });
    };

    GameController.prototype.received = function(packet) {
      switch (packet.id) {
        case PacketId.Chat:
        case PacketId.GlobalChat:
        case PacketId.WhisperChat:
          return this.components("chat").received(packet);
        case PacketId.CharInfo:
          return this.update(this.player.find(packet));
        case PacketId.Player:
          if (this.player.name === packet.name()) {
            return this.player.update(packet);
          } else {
            return this.position(packet);
          }
          break;
        case PacketId.Move:
          return this.move(packet);
      }
    };

    return GameController;

  })();

}).call(this);
