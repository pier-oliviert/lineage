// Generated by CoffeeScript 1.4.0
(function() {

  Uint8Array.prototype.join = function(arr, offset) {
    var int, _i, _len;
    for (_i = 0, _len = arr.length; _i < _len; _i++) {
      int = arr[_i];
      this[offset] = int;
      offset++;
    }
    return arr.length;
  };

  Uint8Array.prototype.string = function() {
    var byte, chars, _i, _len;
    chars = [];
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      byte = this[_i];
      if (byte === 0x00) {
        break;
      }
      chars[_i] = String.fromCharCode(byte);
    }
    return {
      value: chars.join(""),
      size: chars.length++
    };
  };

  Uint8Array.prototype.int = function() {
    return {
      value: this[0],
      size: 1
    };
  };

  Uint8Array.prototype.long = function() {
    var byte, value, _i, _len, _ref;
    value = 0;
    _ref = this.subarray(0, 2);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      byte = _ref[_i];
      value |= byte << 8 * _i;
    }
    return {
      value: value,
      size: 2
    };
  };

  Uint8Array.prototype.parse = function(packet, map) {
    var data, key, obj, type, _results;
    data = new Uint8Array(this);
    _results = [];
    for (key in map) {
      type = map[key];
      obj = data[type].call(data);
      packet[key].call(packet, obj.value);
      _results.push(data = data.subarray(obj.size));
    }
    return _results;
  };

}).call(this);
