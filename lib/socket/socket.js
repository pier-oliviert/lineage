// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Socket = (function() {

    function Socket(ip, port) {
      this.send = __bind(this.send, this);

      this.received = __bind(this.received, this);

      this.bufferize = __bind(this.bufferize, this);

      this.connected = __bind(this.connected, this);

      var _this = this;
      this.socket = chrome.socket;
      this.socketId = -1;
      this.encryptor = new Encryptor();
      this.decryptor = new Decryptor();
      this.socket.create("tcp", {}, function(info) {
        _this.socketId = info.socketId;
        console.log("Connecting to " + ip + ":" + port);
        return _this.socket.connect(_this.socketId, ip, port, _this.connected);
      });
    }

    Socket.prototype.connected = function(e) {
      if (e === 0) {
        console.log("Connected to server");
        return setInterval(this.bufferize, 500);
      } else {
        throw "Couldn't connect to server. Please restart the application";
      }
    };

    Socket.prototype.bufferize = function() {
      return this.socket.read(this.socketId, null, this.received);
    };

    Socket.prototype.received = function(packet) {
      if (!packet.data.byteLength) {

      }
    };

    /*
      #   Discussion: How the server handles the length of a packet goes as follow:
      #   If a packet is smaller than 256bytes, the high byte is used. If however, the message is
      #   bigger than 256bytes, you use the low byte as a multiplicator. 
      #   The length of a packet is assumed to be: lowByte * 256 + highByte
    */


    Socket.prototype.send = function(data) {
      var packet, size;
      data = this.encryptor.process(data);
      size = data.length + 2;
      packet = new Int8Array(new ArrayBuffer(size));
      packet[0] = size % 256;
      packet[1] = (size / 256) & 0xFF;
      packet.join(data, 2);
      console.log(packet.buffer);
      return this.socket.write(this.socketId, packet.buffer, function(e) {
        return console.log(e);
      });
    };

    return Socket;

  })();

}).call(this);
