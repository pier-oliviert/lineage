// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  this.Buffer = (function() {

    function Buffer() {
      this.data = __bind(this.data, this);

      this.full = __bind(this.full, this);
      this.clear();
    }

    /*
      # Assume that data is an instance of Uint8Array.
      # Undefined behavior otherwise!
    */


    Buffer.prototype.append = function(data) {
      var byte, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        byte = data[_i];
        _results.push(this.bytes.push(byte));
      }
      return _results;
    };

    Buffer.prototype.full = function() {
      return !this.empty() && this.bytes.length >= this.size;
    };

    Buffer.prototype.data = function(reinitialize) {
      var data;
      if (reinitialize == null) {
        reinitialize = true;
      }
      data = this.bytes.slice(0, this.size);
      if (reinitialize) {
        this.initialize(new Uint8Array(this.bytes.slice(this.size)));
      }
      return data;
    };

    Buffer.prototype.clear = function() {
      this.size = -1;
      return this.bytes = [];
    };

    Buffer.prototype.empty = function() {
      return this.size < 0;
    };

    /*
      # Assume that data is an instance of Uint8Array.
      # Undefined behavior otherwise!
    */


    Buffer.prototype.initialize = function(data) {
      var flags;
      this.clear();
      if (data.length > 0) {
        flags = data.subarray(0, 2);
        this.size = flags[0] + flags[1] * 256 - 2;
        return this.append(data.subarray(2));
      }
    };

    return Buffer;

  })();

}).call(this);
